#!/usr/bin/env python3
#coding=utf-8
import csv
import asana
import os
import re
from os import path
import sys
import argparse
import datetime
from datetime import timedelta
import collections
import pdb


client = asana.Client.access_token(os.environ['ASANA_PERSONAL_ACCESS_TOKEN'])
mydir = path.dirname(__file__)

SPRINT_PROJECT=537972519778707
POINTS_CUSTOM_FIELD_ID=78913253941342


class SectionData(object):
    
    sprint_section_regex = re.compile(r"""Sprint\ (?P<sprint_count>\d+):     # Index of the sprint
        \ (?P<start>[\/\d]+)-(?P<end>[\/\d]+),                       # Date range
        \ (?P<person_days>\d+)\ person-days                          # Available bandwidth, currently ignored (recalculated each time)
        (?:,\ average\ velocity:\ (?P<velocity>[\.\d]+)\ pt\/p-d)?   # Optional velocity
        (?:\ \((?P<points>\d+)\ points\))?:""", re.X)
    

    offsprint_section_regex = re.compile(r"""Off-sprint \
        \ (?P<start>[\/\d]+)-(?P<end>[\/\d]+),                       # Date range
        \ (?P<person_days>\d+)\ person-days""", re.X)

    @classmethod
    def parse_regular(klass, string):
        try: # Standard sprint
            sd = klass()
            sd._string = string
            sd._match = SectionData.sprint_section_regex.match(string)
            sd.sprint_count = int(sd._match.group('sprint_count'))
            sd.start = klass.parsed_date_argument(sd._match.group('start'))
            sd.end = klass.parsed_date_argument(sd._match.group('end'))
            if sd._match.group('velocity'):
                sd.velocity = float(sd._match.group('velocity'))
            return sd
        except:
            return None

    @classmethod
    def parse_offsprint(klass, string):
        try: # Standard sprint
            sd = klass()
            sd._string = string
            sd._match = SectionData.offsprint_section_regex.match(string)
            sd.start = klass.parsed_date_argument(sd._match.group('start'))
            sd.end = klass.parsed_date_argument(sd._match.group('end'))
            return sd
        except:
            return None

    @classmethod
    def parse(klass, string_or_section):
        string = None
        if type(string_or_section) == str:
            string = string_or_section
        else:
            string = string_or_section['name']
        sd = None
        regular = klass.parse_regular(string)
        if regular:
            sd = regular
        offsprint = klass.parse_offsprint(string)
        if offsprint:
            sd = offsprint
        if type(string_or_section) != str and sd != None:
            sd.id = string_or_section['id']
        return sd

    @classmethod
    def parsed_date_argument(klass, string):
        return datetime.datetime.strptime(string, "%m/%d/%y")

    @classmethod
    def sprint_number(klass, number):
        headers = client.sections.find_by_project(SPRINT_PROJECT)
        for h in headers:
            sd = SectionData.parse(h)
            if sd != None and sd.sprint_count == number:
                return sd
                   
    @property
    def id(self):
        try:
            return self._id
        except AttributeError:
            return None

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def sprint_count(self):
        return self._sprint_count

    @sprint_count.setter
    def sprint_count(self, value):
        self._sprint_count = value

    @property
    def start(self):
        return self._start
    
    @start.setter
    def start(self, value):
        self._start = value

    @property
    def end(self):
        return self._end

    @end.setter
    def end(self, value):
        self._end = value

    @property
    def points(self, points_per_day = 2):
        return self.person_days() * points_per_day

    def person_days(self, people=2):
        # Count single workdays and multiply
        if not self.start and self.end:
            raise ValueError("Start and end must be set")
        date = self.start
        single_person_days = 0
        while date <= self.end:
            if date.weekday() < 5:
                single_person_days += 1
            date = date + timedelta(days = 1)
        return single_person_days * people


    def score(self):
        users = []
        # In a lovely future where boards-to-lists is here, this should work
        # tasks = client.tasks.find_by_section(self.id)
        tasks = []
        tasks_in_project = client.tasks.find_by_project(SPRINT_PROJECT, expand=['memberships','assignee','completed','custom_fields'])
        for task in tasks_in_project:
            if any([membership['section'] and membership['section']['id'] == self.id for membership in task['memberships']]):
                if task['id'] != self.id: #Filter out the "section-task"
                    tasks.append(task)
        # Phew. OK, bucket by user, then by complete/incomplete
        results_per_user = {}
        for task in tasks:
            uid = task['assignee']['id'] 
            if uid not in results_per_user:
                results_per_user[uid] = {}
                results_per_user[uid]['name'] = task['assignee']['name']
                results_per_user[uid]['completed'] = []
                results_per_user[uid]['uncompleted'] = []
                results_per_user[uid]['points_completed'] = 0
                results_per_user[uid]['points_uncompleted'] = 0
            if task['completed']:
                results_per_user[uid]['completed'].append(task)
                # This is hardcoded!
                results_per_user[uid]['points_completed'] += [field for field in task['custom_fields'] if field['id'] == POINTS_CUSTOM_FIELD_ID][0]['number_value']
            else:
                results_per_user[uid]['uncompleted'].append(task)
                results_per_user[uid]['points_uncompleted'] += [field for field in task['custom_fields'] if field['id'] == POINTS_CUSTOM_FIELD_ID][0]['number_value']

        for uid in results_per_user:
            print(f"## {results_per_user[uid]['name']}:")
            print(f"{len(results_per_user[uid]['completed'])} tasks complete ({results_per_user[uid]['points_completed']}) points")
            print(f"{len(results_per_user[uid]['uncompleted'])} tasks incomplete ({results_per_user[uid]['points_uncompleted']}) points")
            print(f"Velocity {results_per_user[uid]['points_completed'] / float(self.person_days(1))}")
        total_points = sum([results_per_user[uid]['points_completed'] for uid in results_per_user])
        print(f"Team Velocity: | Result: {total_points} points ({total_points / float(self.person_days(len(results_per_user)))} ppd)") 




    def __iter__(self):
        return iter()

    def __str__(self):
        sprint_section_template = "Sprint {sprint_count}: {start}-{end}, {person_days} person-days"
        if self.velocity:
            sprint_section_template += ", average_velocity: {velocity}"
        sprint_section_template += " ({points} points)"
        if self.id:
            sprint_section_template += "(Asana ID {aid})"
        sprint_section_template += ":"
        return sprint_section_template.format(sprint_count=self.sprint_count, 
            start=datetime.datetime.strftime(self.start, "%m/%d/%y"),
            end=datetime.datetime.strftime(self.end, "%m/%d/%y"),
            person_days=self.person_days(), 
            velocity=self.velocity, 
            points=self.points,
            aid=self.id)




parser = argparse.ArgumentParser(description = 'Manage our sprint process')
# One of these will create or find the "current" sprint based on dates, etc...
parser.add_argument('-n', '--create_sprint', nargs=3)
parser.add_argument('-s', '--score_latest_sprint', type=int)
#parser.add_argument('-d', '--destination_project')
#parser.add_argument('-r', '--remove', action='store_true', help="Remove from the source project")
#parser.add_argument('-a', '--add', action='store_true', help="Multi-home to the source and dest project")
#parser.add_argument('-m', '--move', action='store_true', help="Move from the source project to the dest project")
#parser.add_argument('-t', '--test', action='store_true')
#
args = parser.parse_args()

print(args)

if args.create_sprint:
    sprint_header = SectionData()
    sprint_header.sprint_count = args.create_sprint[0]
    sprint_header.start = SectionData.parsed_date_argument(args.create_sprint[1])
    sprint_header.end = SectionData.parsed_date_argument(args.create_sprint[2])
    print(sprint_header)

if args.score_latest_sprint:
    print(f"Scoring sprint {args.score_latest_sprint}")
    sprint_data = SectionData.sprint_number(args.score_latest_sprint)
    sprint_data.score()
